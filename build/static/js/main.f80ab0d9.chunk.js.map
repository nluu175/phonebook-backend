{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","placeholder","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f80ab0d9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\n// const baseUrl = \"https://desolate-cove-33086.herokuapp.com/api/notes\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: \"This note is not saved to server\",\r\n    date: \"2019-05-30T17:30:31.098Z\",\r\n    important: true,\r\n  };\r\n  return request.then((response) => response.data.concat(nonExisting));\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\n// We can export like this since the names are the same\r\nexport default { getAll, create, update };\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: \"green\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 16,\r\n  };\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app - by Nhat Minh, Luu (2021)</em>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"some error happened...\");\n\n  /*   useEffect \n  - Effect runs after every completed render\n  - However, you can choose to fire it only when certain values have changed\n  - The second parameter specify how often the effect is run.\n  - If the second parameter is an empty array [],\n  then the effect is only run along with the first render of the component useEffect(hook, []);\n  NOTE: TO COMMENT MULTIPLE LINES OF CODE LIKE THIS, WE USE \"SHIFT + ALT + A\" */\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  console.log(\"rendered\", notes.length, \"notes\");\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        // Error Notification\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 3000);\n\n        // Remove it from the list on Client side\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  // if notesToShow === true, set to notes, otherwise, filter the one with \"important === true\"\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          Show {showAll ? \"Important\" : \"All\"}\n        </button>\n      </div>\n      {/* List of notes */}\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n          placeholder=\"Enter a new note here!!!\"\n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}